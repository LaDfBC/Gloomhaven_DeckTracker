/*
 * This file is generated by jOOQ.
 */
package com.jaerapps.generated.jooq.public_.tables;


import com.jaerapps.generated.jooq.public_.Keys;
import com.jaerapps.generated.jooq.public_.Public;
import com.jaerapps.generated.jooq.public_.tables.records.DeckRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Deck extends TableImpl<DeckRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.deck</code>
     */
    public static final Deck DECK = new Deck();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DeckRecord> getRecordType() {
        return DeckRecord.class;
    }

    /**
     * The column <code>public.deck.id</code>.
     */
    public final TableField<DeckRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.deck.name</code>.
     */
    public final TableField<DeckRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.deck.active</code>.
     */
    public final TableField<DeckRecord, Boolean> ACTIVE = createField(DSL.name("active"), SQLDataType.BOOLEAN.defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

    private Deck(Name alias, Table<DeckRecord> aliased) {
        this(alias, aliased, null);
    }

    private Deck(Name alias, Table<DeckRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.deck</code> table reference
     */
    public Deck(String alias) {
        this(DSL.name(alias), DECK);
    }

    /**
     * Create an aliased <code>public.deck</code> table reference
     */
    public Deck(Name alias) {
        this(alias, DECK);
    }

    /**
     * Create a <code>public.deck</code> table reference
     */
    public Deck() {
        this(DSL.name("deck"), null);
    }

    public <O extends Record> Deck(Table<O> child, ForeignKey<O, DeckRecord> key) {
        super(child, key, DECK);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<DeckRecord, Integer> getIdentity() {
        return (Identity<DeckRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<DeckRecord> getPrimaryKey() {
        return Keys.DECK_PKEY;
    }

    @Override
    public List<UniqueKey<DeckRecord>> getKeys() {
        return Arrays.<UniqueKey<DeckRecord>>asList(Keys.DECK_PKEY);
    }

    @Override
    public Deck as(String alias) {
        return new Deck(DSL.name(alias), this);
    }

    @Override
    public Deck as(Name alias) {
        return new Deck(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Deck rename(String name) {
        return new Deck(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Deck rename(Name name) {
        return new Deck(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, Boolean> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
