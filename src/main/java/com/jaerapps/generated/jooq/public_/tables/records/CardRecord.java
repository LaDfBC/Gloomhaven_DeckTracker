/*
 * This file is generated by jOOQ.
 */
package com.jaerapps.generated.jooq.public_.tables.records;


import com.jaerapps.generated.jooq.public_.tables.Card;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record6;
import org.jooq.Row6;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CardRecord extends UpdatableRecordImpl<CardRecord> implements Record6<Integer, String, Boolean, Boolean, Integer, Boolean> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.card.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.card.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.card.name</code>.
     */
    public void setName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.card.name</code>.
     */
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.card.rolling</code>.
     */
    public void setRolling(Boolean value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.card.rolling</code>.
     */
    public Boolean getRolling() {
        return (Boolean) get(2);
    }

    /**
     * Setter for <code>public.card.ephemeral</code>.
     */
    public void setEphemeral(Boolean value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.card.ephemeral</code>.
     */
    public Boolean getEphemeral() {
        return (Boolean) get(3);
    }

    /**
     * Setter for <code>public.card.deck_id</code>.
     */
    public void setDeckId(Integer value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.card.deck_id</code>.
     */
    public Integer getDeckId() {
        return (Integer) get(4);
    }

    /**
     * Setter for <code>public.card.already_drawn</code>.
     */
    public void setAlreadyDrawn(Boolean value) {
        set(5, value);
    }

    /**
     * Getter for <code>public.card.already_drawn</code>.
     */
    public Boolean getAlreadyDrawn() {
        return (Boolean) get(5);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, String, Boolean, Boolean, Integer, Boolean> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    @Override
    public Row6<Integer, String, Boolean, Boolean, Integer, Boolean> valuesRow() {
        return (Row6) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Card.CARD.ID;
    }

    @Override
    public Field<String> field2() {
        return Card.CARD.NAME;
    }

    @Override
    public Field<Boolean> field3() {
        return Card.CARD.ROLLING;
    }

    @Override
    public Field<Boolean> field4() {
        return Card.CARD.EPHEMERAL;
    }

    @Override
    public Field<Integer> field5() {
        return Card.CARD.DECK_ID;
    }

    @Override
    public Field<Boolean> field6() {
        return Card.CARD.ALREADY_DRAWN;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public Boolean component3() {
        return getRolling();
    }

    @Override
    public Boolean component4() {
        return getEphemeral();
    }

    @Override
    public Integer component5() {
        return getDeckId();
    }

    @Override
    public Boolean component6() {
        return getAlreadyDrawn();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public Boolean value3() {
        return getRolling();
    }

    @Override
    public Boolean value4() {
        return getEphemeral();
    }

    @Override
    public Integer value5() {
        return getDeckId();
    }

    @Override
    public Boolean value6() {
        return getAlreadyDrawn();
    }

    @Override
    public CardRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public CardRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public CardRecord value3(Boolean value) {
        setRolling(value);
        return this;
    }

    @Override
    public CardRecord value4(Boolean value) {
        setEphemeral(value);
        return this;
    }

    @Override
    public CardRecord value5(Integer value) {
        setDeckId(value);
        return this;
    }

    @Override
    public CardRecord value6(Boolean value) {
        setAlreadyDrawn(value);
        return this;
    }

    @Override
    public CardRecord values(Integer value1, String value2, Boolean value3, Boolean value4, Integer value5, Boolean value6) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CardRecord
     */
    public CardRecord() {
        super(Card.CARD);
    }

    /**
     * Create a detached, initialised CardRecord
     */
    public CardRecord(Integer id, String name, Boolean rolling, Boolean ephemeral, Integer deckId, Boolean alreadyDrawn) {
        super(Card.CARD);

        setId(id);
        setName(name);
        setRolling(rolling);
        setEphemeral(ephemeral);
        setDeckId(deckId);
        setAlreadyDrawn(alreadyDrawn);
    }
}
